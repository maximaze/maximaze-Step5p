[커맨드 객체의 값 검증과 에러 메시지 처리]

import org.springframework.validation.Validator;

(객체를 검증할 때 사용하는 Validator 인터페이스)
public interface Validator {
	boolean supports(Class<?> clazz);
	void validate(@Nullable Object target, Errors errors);
}

boolean supports(Class<?> clazz);
1. Validator가 검증할 수 있는 타입인지 검사

void validate(@Nullable Object target, Errors errors);
1. 파라미터로 전달된 target 객체를 검증하고 오류 검사 결과를 errors에 담는다.

(예제 소스)
1. RegisterRequestWalidator.java
	public class RegisterRequestValidator implements Validator {
		@Override
		public boolean supports(Class<?> clazz) {
		}
		@OVerride
		public void validate(Object target, Errors errors) {
		}
	}

2. RegisterController.java
	@PostMapping("/register/step3")
	public String handleStep3(RegisterRequest regReq, Errors errors) {
		new RegisterRequestValidator().validate(regReq, errors);
		if (errors.hasErrors()) {
			return "register/step2";
		}
	}
	
3. step2.jsp
	<form:form action="step3" modelAttribute="registerRequest">
		 <form:errors path="email"/>
	</form:form>

(메세지 코드 검색 규칙)
1. 에러코드, 커맨드객체이름.필두명
2. 에러코드.필드명
3. 에러코드.필드타입
4. 에러코드
5. 예시
	errors.rejectValue("필드명","에러코드")
	errors.rejectValue("email","required")			// required=필수항목입니다.
	errors.rejectValue("confirmPassword","nomatch")	// nomatch.confirmPassword=비밀번호와 확인이 일치하지 않습니다.
	errors.rejectValue("email","bad")				// bad.email=이메일이 올바르지 않습니다,
	
	(label.properties)
	required=필수항목입니다.
	bad.email=이메일이 올바르지 않습니다.
	duplicate.email=중복된 이메일입니다.
	nomatch.confirmPassword=비밀번호와 확인이 일치하지 않습니다.










